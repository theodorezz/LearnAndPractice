## 一、混沌工程是什么

《混沌工程：Netflix系统稳定性之道》一书中，混沌工程的原则是这样阐述的：
	

> 混沌工程是一门新兴的技术学科，它的初衷是通过实验性的方法，让人们建立复杂分布式系统能够在生产中抵御突发事件能力的信心。

混沌工程的目标是在上线前发现系统隐患并着手解决，避免出现线上问题，万一出问题也在可控范围内。


## 二、为什么需要混沌工程

在节点真正宕机前，我们并不知道一个节点宕机后系统会发生什么。
k8s环境中，系统会检测到节点不可用，然后触发替换机制吗？之前节点上的pod及相关数据，会不会被正常传输到替换后的节点，整个过程耗时是否可接受？......在这些方面我们似乎有一个隐约的概念，在测试边缘徘徊，但没有一套理论支撑实践。

混沌工程可以模拟以下故障：

- 节点宕机
- 一段时间内网络延迟、丢包
- 域名被篡改，导致下载镜像失败
- 方法级别的混沌（运行时注入）：让方法延迟返回、返回特定值、随机抛异常
- 让某进程CPU超负荷
- 让某容器出现OOM故障

混沌工程正是指导我们进行一系列使系统出现“意想不到的问题”的理论依据，它有五个执行准则
- 建立稳定性状态的假设
- 用多样的现实世界事件做验证
- 在生产环境中进行实验
- 自动化实验以持续运行
- 最小化爆炸半径


业界有诸多混沌工程工具：

- [Chaos-Lambda](https://github.com/artilleryio/chaos-lambda)
- Azure混沌工程工具：[Fault Analysis Service](https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-testability-overview)
- AWS混沌工程工具：[Gremlin](https://aws.amazon.com/cn/blogs/china/aws-chaos-engineering-start/)
- [Chaostoolkit](https://github.com/chaostoolkit/chaostoolkit)
- Netflix混沌工程工具：[ChaosMonkey](https://github.com/Netflix/chaosmonkey)
- 阿里巴巴混沌工程工具：[ChaosBlade](https://github.com/chaosblade-io)

## 三、混沌工程演练前的准备

在本文中，选择ChaosBlade作为混沌工程工具。
根据ChaosBlade社区给出的实验模型，在进行混沌工程演练前，需做以下准备：
 1. 制定混沌实验计划：
 混沌工程注入的场景、轮次、时间、频率等；
 2. 定义稳态指标：
 即系统即将进入不稳定状态的临界值；但对系统稳态的定义，就像人体体温是大约37度，汽车启动后平稳行驶，需根据不同系统特点进行；
 3. 做出系统容错行为假设：
 我们不可能预知系统的每一个反应，但需了解实验行为的后果，以对系统状态进行准确判断；
 4. 执行混沌实验
 5. 检查系统稳态指标：
 6. 记录&恢复混沌实验
 7. 修复发现的问题
 8. 自动化持续验证：
 结合DevOps，将混沌工程常态化，形成混沌工程文化。

除此之外，假如环境是AWS EKS，则无法直接操作Master节点，需通过跳板机操作集群。


## 四、混沌工程执行

不同的部署方式，不同的业务，当然应该设计不同的实验方案，但有一点，对系统故障严重程度的定义，不会因业务、部署方式不同而改变。混沌实验须关注以下几点：

 1. 验证系统弹性：在不知道系统极限的情况下，尽可能增大实验参数，以了解系统边界，当然，这不能在生产环境中进行；
 2. 告警时效性：设置告警阈值后，监控应及时响应，告警邮件及时发送；
 3. 增加复杂度：我认为即使在一个完全不变的环境中，混沌实验也是没有尽头的，因为有无数种故障组合可以注入；
 4. 符合使用逻辑：注入符合使用逻辑的故障，以准确观察系统表现；
 5. 及时销毁故障：混沌实验应遵循注入-销毁-注入-销毁的流程，以防未销毁的异常影响系统的下一次实验及测试、使用；
 6. 在稳态中进行：当了解系统稳态，则混沌实验就尽量在不影响系统稳态的前提下进行。

